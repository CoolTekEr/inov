#!/bin/bash

# Usage help information
usage() {
    echo "Usage: $0 <string1> <string2> <string3>"
    echo "Example: $0 value1 value2 value3"
}

# Check if all required arguments are provided
if [ "$#" -ne 3 ]; then
    usage
    exit 1
fi

# Set variables
STRING1=$1
STRING2=$2
STRING3=$3
URL="http://x.y.z.com"
HEADER="appid: YourAppID"

# Send POST request with fields and headers
RESPONSE=$(curl -s -X POST -H "$HEADER" -d "{\"string1\":\"$STRING1\",\"string2\":\"$STRING2\",\"string3\":\"$STRING3\"}" "$URL")

# Check response status
RESPONSE_CODE=$(echo "$RESPONSE" | awk '{print $2}')
if [ "$RESPONSE_CODE" -eq 200 ]; then
    # Extract the 'target' string from response JSON
    TARGET=$(echo "$RESPONSE" | grep -o '"target":"[^"]*' | cut -d'"' -f4)
    echo "Target: $TARGET"
else
    # Print user-friendly error message
    echo "Error: Request failed with response code $RESPONSE_CODE"
fi
@Entity
@Table(name = "products")
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "name")
    private String name;

    // ... other properties and methods
}
@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {

    List<Product> findByNameLike(String searchTerm);

}

@Service
public class ProductService {

    private final ProductRepository productRepository;

    public ProductService(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    public List<Product> searchProducts(String searchTerm) {
        return productRepository.findByNameLike("%" + searchTerm + "%");
    }
}
#!/bin/bash

# Variables
file_path="/path/to/local/file.txt"
auth_token="YOUR_AUTH_TOKEN"
endpoint="https://example.com/api/endpoint"

# Check if the file exists
if [ ! -f "$file_path" ]; then
  echo "File not found: $file_path"
  exit 1
fi

# Check if the auth token is provided
if [ -z "$auth_token" ]; then
  echo "Auth token is missing"
  exit 1
fi

# Check if the endpoint is provided
if [ -z "$endpoint" ]; then
  echo "Endpoint is missing"
  exit 1
fi

# Send the cURL request
curl -X POST "$endpoint" \
  -H "Authorization: Bearer $auth_token" \
  -F "file=@$file_path"


------
YourCompositeKey compositeKey = new YourCompositeKey();
compositeKey.setColumnA("valueA");
compositeKey.setColumnB("valueB");
compositeKey.setColumnC("valueC");

YourEntity entity = new YourEntity();
entity.setCompositeKey(compositeKey);
// Set other properties of the entity

yourEntityRepository.save(entity);

=========

@Embeddable
public class YourCompositeKey implements Serializable {

    @Column(name = "column_a")
    private String columnA;

    @Column(name = "column_b")
    private String columnB;

    @Column(name = "column_c")
    private String columnC;

    // Constructors, getters, setters, equals, and hashCode methods
}
===========
@Entity
public class YourEntity {

    @EmbeddedId
    private YourCompositeKey compositeKey;

    // Other entity properties and methods

    public YourCompositeKey getCompositeKey() {
        return compositeKey;
    }

    public void setCompositeKey(YourCompositeKey compositeKey) {
        this.compositeKey = compositeKey;
    }
}
